#!/data/data/com.termux/files/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jan 14 01:02:06 2025
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "\[1m\[7m%\[27m\[1m\[0m                                                                     \r \r\]2;u0_a422@localhost:~/termux-fun\]1;~/termux-fun\]7;file://localhost/data/data/com.termux/files/home/termux-fun\\\r\[0m\[27m\[24m\[J\[01;32mâžœ  \[36mtermux-fun\[00m \[K\[?1h=\[?2004h\r\r\[0m\[27m\[24m\[J\[01;32mâžœ  \[36mtermux-fun\[00m \[01;34mgit:(\[31mmain\[34m) \[33mâœ—\[00m \[K"
send -- "."
expect -exact ".\[90m/git.bash push\[39m\[14D"
send -- "/"
expect -exact ".\[39m/"
send -- "m"
expect -exact "\[39mm\[39m \[39m \[39m \[39m \[39m \[39m \[39m \[39m \[39m \[39m \[39m \[39m \[12D\[90make-git-ssh.bash\[39m\[16D"
send -- "OF"
expect -exact "\[39ma\[39mk\[39me\[39m-\[39mg\[39mi\[39mt\[39m-\[39ms\[39ms\[39mh\[39m.\[39mb\[39ma\[39ms\[39mh"
send -- "\r"
expect -exact "\[?1l>\[?2004l\r\r
\]2;./make-git-ssh.bash\]1;./make-git-ssh.bashGenerating public/private ed25519 key pair.\r
Enter file in which to save the key (/data/data/com.termux/files/home/.ssh/id_ed25519): "
send -- "hello"
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- ""
expect -exact " "
send -- "\r"
expect -exact "\r
Created directory '/data/data/com.termux/files/home/.ssh'.\r\r
Enter passphrase for \"/data/data/com.termux/files/home/.ssh/id_ed25519\" (empty for no passphrase): "
send -- "hello\r"
expect -exact "\r
Enter same passphrase again: "
send -- "hello\r"
expect -exact "\r
Your identification has been saved in /data/data/com.termux/files/home/.ssh/id_ed25519\r
Your public key has been saved in /data/data/com.termux/files/home/.ssh/id_ed25519.pub\r
The key fingerprint is:\r
SHA256:vvyhz6vEJmaPCxMAcKmQ/Ct78iPYQ2LLx5Nn4y05ZgE diamond2sword@gmail.com\r
The key's randomart image is:\r
+--\[ED25519 256\]--+\r
|=...             |\r
|o+.              |\r
|..o              |\r
|.  E             |\r
|    +   S        |\r
|.o.. o o         |\r
|++= + * = .      |\r
|.*oB #.B + .     |\r
|  *oO.*o*+=.     |\r
+----\[SHA256\]-----+\r
Agent pid 32562\r
Enter passphrase for /data/data/com.termux/files/home/.ssh/id_ed25519: "
send -- "hello\r"
expect -exact "\r
Identity added: /data/data/com.termux/files/home/.ssh/id_ed25519 (diamond2sword@gma